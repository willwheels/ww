[
  {
    "path": "posts/2021-03-02-so-you-want-to-merge-frs-data/",
    "title": "So You Want to Merge FRS Data?",
    "description": "A quick blog post to describe merging ECHO data with FRS data.",
    "author": [
      {
        "name": "Will Wheeler",
        "url": "http://willwheels.rbind.io/"
      }
    ],
    "date": "2021-03-02",
    "categories": [],
    "contents": "\r\nIn the last week, I have received two similar questions about merging data from the EPA ECHO Data Downloads. In this post, I try to answer one of these questions, posed by Ashley Langer:\r\n\r\n\r\n\r\nCEMS is the Continuous Emissions Monitoring System data.1 These continuous monitors are generally used by facilities in air market trading programs, which depend on quite accurate data.\r\nThe other data set is ICIS-Air, housed by ECHO, contains which “emissions, compliance, and enforcement data on stationary sources of air pollution.” This data set focuses on the plant level.\r\nBoth of these data sets have their own facility identifiers, but the CEMS data does not contain a linking identifier (or at least, the data set under discussion does not). Common identifiers are provided by EPA’s Facility Registry Service. It’s important to note here that the common identifier may not be one-to-one, based on differing regulatory definitions and what FRS considers to be a facility.\r\nThe ECHO data downloads have an FRS file, so what’s the problem? This is not a complete copy of FRS. As noted in the download summary:\r\n\r\nrecords included in the FRS download file are those with a valid FRS and which are cross-referenced by ID number to data contained in ICIS-Air, TRI, GHG (E-GGRT), RCRAInfo, SDWIS, ICIS-NPDES, or Superfund Enterprise Management System (SEMS), or which are linked to a formal enforcement action in ICIS-FE&C.\r\n\r\nCEMS uses the identifier from the EIA form 860 which is not in the FRS file at the ECHO data downloads (my understanding is that the ECHO FRS file only includes regulatory programs that are in other ECHO download files). The solution is to use the FRS flat file downloads. If you did not know these files existed, don’t feel bad, I’ve had to point people to them numerous times!\r\nFor convenience and speed, I’m going to look just at one state. The national combined files are athttps://ofmext.epa.gov/FLA/www3/state_files/national_combined.zip\r\n\r\n\r\ntemp <- tempfile()\r\ndownload.file(\"https://ofmext.epa.gov/FLA/www3/state_files/state_combined_tx.zip\",temp)\r\n\r\nunzip(temp, list = TRUE)\r\n\r\n                                                 Name    Length\r\n1                        TX_ALTERNATIVE_NAME_FILE.CSV  22091458\r\n2                                 TX_CONTACT_FILE.CSV  28940865\r\n3                  TX_ENVIRONMENTAL_INTEREST_FILE.CSV  56539833\r\n4                                TX_FACILITY_FILE.CSV 129689442\r\n5                         TX_MAILING_ADDRESS_FILE.CSV  21212504\r\n6                                   TX_NAICS_FILE.CSV  10462281\r\n7                            TX_ORGANIZATION_FILE.CSV  66343323\r\n8                                 TX_PROGRAM_FILE.CSV 161161367\r\n9                             TX_PROGRAM_GIS_FILE.CSV  31614995\r\n10                                    TX_SIC_FILE.CSV  14935318\r\n11                          TX_SUPP_INTEREST_FILE.CSV  59122565\r\n12 Facility State File Documentation 11132012_new.pdf   1020424\r\n                  Date\r\n1  2021-02-03 03:49:00\r\n2  2021-02-03 04:05:00\r\n3  2021-02-03 03:37:00\r\n4  2021-02-03 03:30:00\r\n5  2021-02-03 04:13:00\r\n6  2021-02-03 03:42:00\r\n7  2021-02-03 03:58:00\r\n8  2021-02-03 03:33:00\r\n9  2021-02-03 04:22:00\r\n10 2021-02-03 03:45:00\r\n11 2021-02-03 04:17:00\r\n12 2020-05-18 12:41:00\r\n\r\nWhat we actually need is the Environmental Interest file (there is a PDF if you need to look at the documentation).\r\n\r\n\r\nenv_interest <- read_csv(unzip(temp, \"TX_ENVIRONMENTAL_INTEREST_FILE.CSV\"))\r\n\r\n\r\nspec(env_interest)\r\n\r\ncols(\r\n  REGISTRY_ID = col_double(),\r\n  PGM_SYS_ACRNM = col_character(),\r\n  PGM_SYS_ID = col_character(),\r\n  INTEREST_TYPE = col_character(),\r\n  FED_STATE_CODE = col_character(),\r\n  START_DATE = col_character(),\r\n  START_DATE_QUALIFIER = col_character(),\r\n  END_DATE = col_character(),\r\n  END_DATE_QUALIFIER = col_character(),\r\n  SOURCE_OF_DATA = col_character(),\r\n  LAST_REPORTED_DATE = col_character(),\r\n  CREATE_DATE = col_character(),\r\n  UPDATE_DATE = col_character(),\r\n  ACTIVE_STATUS = col_character()\r\n)\r\n\r\nI’m going to throw in a tip here. readr::read_csv shows how it decided to parse each column. Notice how REGISTRY_ID was read as double? That’s bad! REGISTRY_ID is an integer identifier and you want to make sure you don’t lose accuracy in digits. When using ECHO or other, similar data sets I STRONGLY recommend assigning column types when reading the data. With read_csv, this is accomplished by cutting and pasting the output from spec() and creating a list, then setting col_types to this list in read_csv.\r\n\r\nThis has bitten me in the past.\r\n\r\n\r\ncoltypes <- cols(\r\n  REGISTRY_ID = col_character(),\r\n  PGM_SYS_ACRNM = col_character(),\r\n  PGM_SYS_ID = col_character(),\r\n  INTEREST_TYPE = col_character(),\r\n  FED_STATE_CODE = col_character(),\r\n  START_DATE = col_character(),\r\n  START_DATE_QUALIFIER = col_character(),\r\n  END_DATE = col_character(),\r\n  END_DATE_QUALIFIER = col_character(),\r\n  SOURCE_OF_DATA = col_character(),\r\n  LAST_REPORTED_DATE = col_character(),\r\n  CREATE_DATE = col_character(),\r\n  UPDATE_DATE = col_character(),\r\n  ACTIVE_STATUS = col_character()\r\n)\r\n  \r\nenv_interest <- read_csv(unzip(temp, \"TX_ENVIRONMENTAL_INTEREST_FILE.CSV\"),\r\n                         col_types = coltypes)\r\n\r\n\r\n\r\n\r\nLet’s take a quick look at the data\r\n\r\n\r\nhead(env_interest)\r\n\r\n# A tibble: 6 x 14\r\n  REGISTRY_ID PGM_SYS_ACRNM PGM_SYS_ID INTEREST_TYPE FED_STATE_CODE\r\n  <chr>       <chr>         <chr>      <chr>         <chr>         \r\n1 1100004559~ TRIS          75006CRGL~ TRI REPORTER  <NA>          \r\n2 1100004559~ NCDB          I06#19891~ COMPLIANCE A~ FEDERAL       \r\n3 1100004559~ TX-TCEQ ACR   RN1019959~ STATE MASTER  STATE         \r\n4 1100004559~ RCRAINFO      TXD099927~ CESQG         FEDERAL       \r\n5 1100004559~ NPDES         TXR05DZ60  ICIS-NPDES N~ FEDERAL       \r\n6 1100004559~ RCRAINFO      TXD099927~ UNSPECIFIED ~ FEDERAL       \r\n# ... with 9 more variables: START_DATE <chr>,\r\n#   START_DATE_QUALIFIER <chr>, END_DATE <chr>,\r\n#   END_DATE_QUALIFIER <chr>, SOURCE_OF_DATA <chr>,\r\n#   LAST_REPORTED_DATE <chr>, CREATE_DATE <chr>, UPDATE_DATE <chr>,\r\n#   ACTIVE_STATUS <chr>\r\n\r\nRelevant for our purposes here, REGISTRY_ID is the FRS identifier, PGM_SYS_ACRNM is the acronym for a regulatory program, PGM_SYS_ID is the facility identifier for that program.\r\nDoing a quick count shows that there are 41 different regulatory programs in the file!\r\n\r\n\r\nenv_interest %>%\r\n  count(PGM_SYS_ACRNM) %>%\r\n  arrange(desc(n))\r\n\r\n# A tibble: 41 x 2\r\n   PGM_SYS_ACRNM      n\r\n   <chr>          <int>\r\n 1 TX-TCEQ ACR   165635\r\n 2 NPDES         120956\r\n 3 RCRAINFO       43410\r\n 4 SFDW           33372\r\n 5 ICIS           14859\r\n 6 EIS             7892\r\n 7 OSHA-OIS        6902\r\n 8 AIR             6582\r\n 9 AIRS/AFS        5501\r\n10 TRIS            4661\r\n# ... with 31 more rows\r\n\r\nNext step is to create two dataframes, one for each of the two system identifers we want, and then join them by the REGISTRY_ID.\r\n\r\n\r\nair_df <- env_interest %>%\r\n  filter(PGM_SYS_ACRNM == \"AIR\") %>%\r\n  select(REGISTRY_ID, PGM_SYS_ACRNM, PGM_SYS_ID) %>%\r\n  rename(air_id = PGM_SYS_ID)\r\n  \r\ncems_df <- env_interest %>%\r\n  filter(PGM_SYS_ACRNM == \"EIA-860\") %>%\r\n  select(REGISTRY_ID, PGM_SYS_ACRNM, PGM_SYS_ID) %>%\r\n  rename(cems_id = PGM_SYS_ID)\r\n\r\njoined_df <- full_join(air_df, cems_df, by = \"REGISTRY_ID\")\r\n\r\nhead(joined_df)\r\n\r\n# A tibble: 6 x 5\r\n  REGISTRY_ID  PGM_SYS_ACRNM.x air_id          PGM_SYS_ACRNM.y cems_id\r\n  <chr>        <chr>           <chr>           <chr>           <chr>  \r\n1 110000456042 AIR             TX000000481130~ <NA>            <NA>   \r\n2 110000456042 AIR             TX000000481210~ <NA>            <NA>   \r\n3 110000456079 AIR             TX000000481130~ <NA>            <NA>   \r\n4 110000456079 AIR             TX000000481130~ <NA>            <NA>   \r\n5 110000456088 AIR             TX000000480850~ <NA>            <NA>   \r\n6 110000456140 AIR             TX000000481130~ <NA>            <NA>   \r\n\r\nAlthough there are 660 CEMS identifiers in the joined data, only 188 of these have an associated ICIS-Air identifier. These are attached to 221 ICIS-Air identifiers.\r\nI’m afraid that I can’t explain why these numbers differ. One potential explanation is that ICIS-Air is a relatively new dataset (it’s predecessor, AFS, is frozen as of late 2014), so if a CEMS reporter stopped emitting prior to that date, it would not be in ICIS-Air. I nevertheless hope this is helpful.\r\nPlease let me know if you have any questions!\r\nThis work is not a product of the United States Government or the United States Environmental Protection Agency, and the author is not doing this work in any governmental capacity. The views expressed are those of the author only and do not necessarily represent those of the United States or the US EPA.\r\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\r\nData downloads are provided by EPA’s Clean Air Markets Division at https://ampd.epa.gov/ampd/.↩︎\r\n",
    "preview": "posts/2021-03-02-so-you-want-to-merge-frs-data/so-you-want-to-merge-frs-data_files/figure-html5/tweet-from-ashley-1.png",
    "last_modified": "2021-03-02T10:52:56-05:00",
    "input_file": {},
    "preview_width": 1100,
    "preview_height": 474
  }
]
